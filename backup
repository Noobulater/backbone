#echo("pos : ", this.pos)
#echo("lastPos : ", lastPos)
#echo("normal : ", result.hitNormal)
#echo("hitpos : ", result.hitPos)

proc update*(dt: float) = #dt was the last time it was called
  var this: PhysObj
  for i in low(physObjs)..high(physObjs) :
    this = physObjs[i]
    if (this.isValid) :
      let pos = this.pos #+ vec3(0.0,0.05,0.0) # treats it as if he is floating
      #THIS STEP ACCOUNTS FOR VELOCITY/TUNNELING ISSUE
      #Essentially this traces the path and progresses the object
      #to the point of the contact. Then it will collide
      let
        movement = this.vel * dt + this.acceleration * dt
        projPos = pos + movement
        norm = movement.normal()
        dist = distance(pos, projPos)
      let min = vec3(this.lmin.x + this.pos.x, this.pos.y + this.lmin.y - 0.2,this.lmin.z + this.pos.z)
      let max = vec3(this.lmax.x + this.pos.x, this.pos.y + this.lmin.y, this.lmax.z + this.pos.z)
      this.onGround = queryVoxels(min,max).intersecting

      if (not this.onGround) :
        #calculate gravity
        if (this.gravity != 0) :
          this.vel[1] = this.vel[1] - this.gravity * dt # gravity/drag handle
          # gravity/drag handle      #echo(norm)

      # break this velocity into discrete steps
      #TODO: make the discrete steps dependent on
      #the size of the object being compared

      for i in 0..(dist.int + 1) :
        var
          origin = pos + norm * (i.float) * dt
          lmin = this.lmin + origin
          lmax = this.lmax + origin
          obbc = (this.lmax - this.lmin) * (1.0/2.0)
        var result = queryVoxels(lmin,lmax)
        if (result.intersecting) :
          #Collision Response here

          result.hitNormal = ((origin + obbc + norm * -1.0) - result.hitPos).normal()

          let maxv = absMaxValue(result.hitNormal)

          for m in 0..2 :
            let
              priority = [1,0,2]
              j = priority[m]
            if (abs(result.hitNormal[j]) == maxv) :
              let
                voxMin = result.hitPos[j] + -0.5
                voxMax = result.hitPos[j] + 0.5
              if (result.hitNormal[j] >= 0) :
                result.hitNormal = vec3(0)
                result.hitNormal[j] = 1
                if (this.acceleration.normal()[j] < 0) :
                  this.acceleration[j] = max(0, this.acceleration[j])
                if (this.vel.normal()[j] < 0) :
                  this.vel[j] = max(0, this.vel[j])

                let pen = voxMax - (lmin)[j]
                this.pos[j] = origin[j] + pen + 0.0005

                #result = queryVoxels(this.pos + this.lmin, this.pos + this.lmax)
                #if (result.intersecting) :
                #  origin = this.pos
                #  lmin = this.lmin + origin
                #  lmax = this.lmax + origin
                #else :
                #  echo("final : " ,this.pos)
              else :
                result.hitNormal = vec3(0)
                result.hitNormal[j] = -1
                if (this.acceleration.normal()[j] > 0) :
                  this.acceleration[j] = min(0, this.acceleration[j])
                if (this.vel.normal()[j] > 0) :
                  this.vel[j] = min(0, this.vel[j])

                let pen = (lmax)[j] - voxMin
                this.pos[j] = origin[j] - pen - 0.0005
              break

      echo("--")
      this.pos = this.pos + this.vel * dt + this.acceleration * dt
      this.angle = this.angle + this.angleVel * dt

      this.update(dt) # Updates the matrix




proc update*(dt: float) = #dt was the last time it was called
  var this: PhysObj
  for i in low(physObjs)..high(physObjs) :
    this = physObjs[i]
    if (this.isValid) :
      let pos = this.pos #+ vec3(0.0,0.05,0.0) # treats it as if he is floating
      #THIS STEP ACCOUNTS FOR VELOCITY/TUNNELING ISSUE
      #Essentially this traces the path and progresses the object
      #to the point of the contact. Then it will collide
      let
        movement = this.vel * dt + this.acceleration * dt
        projPos = pos + movement
        norm = movement.normal()
        dist = distance(pos, projPos)

      #echo(norm)
      # break this velocity into discrete steps
      #TODO: make the discrete steps dependent on
      #the size of the object being compared
      for i in 0..(dist.int+1) :
        let
          origin = pos + norm * i.float * dt
          lmin = this.lmin + origin + vec3(0.5)
          lmax = this.lmax + origin + vec3(0.5)
          obbc = (this.lmax - this.lmin) * (1.0/2.0)
        var result = queryVoxels(lmin,lmax)

        if (result.intersecting) :
          #Collision Response here
          result.hitNormal = ((origin + norm * -1.0) - result.hitPos).normal()
          let maxv = absMaxValue(result.hitNormal)
          #echo(result.hitNormal)

          #unstick it
          #this.pos = origin

          for m in 0..2 :
            let
              priority = [1,0,2]
              j = priority[m]
            if (abs(result.hitNormal[j]) == maxv) :
              let
                voxMin = result.hitPos[j] + -0.5
                voxMax = result.hitPos[j] + 0.5
              if (result.hitNormal[j] > 0) :
                result.hitNormal = vec3(0)
                result.hitNormal[j] = 1
                if (this.acceleration.normal()[j] < 0) :
                  close = true
                  this.acceleration[j] = max(0, this.acceleration[j])
                if (this.vel.normal()[j] < 0) :
                  this.vel[j] = max(0, this.vel[j])

                let pen = (origin + this.lmin)[j] - voxMax
                this.pos[j] = origin[j] - pen + 0.005#- 0 #+ 0.05

              else :
                result.hitNormal = vec3(0)
                result.hitNormal[j] = -1
                if (this.acceleration.normal()[j] > 0) :
                  close = true
                  this.acceleration[j] = min(0, this.acceleration[j])
                if (this.vel.normal()[j] > 0) :
                  this.vel[j] = min(0, this.vel[j])

                let pen = (origin + this.lmax)[j] - voxMin
                this.pos[j] = origin[j] - pen - 0.005
              #break
          break
        #else :
        #  this.pos = origin

      let min = vec3(this.lmin.x + this.pos.x, this.pos.y + this.lmin.y - 0.2,this.lmin.z + this.pos.z)
      let max = vec3(this.lmax.x + this.pos.x, this.pos.y + this.lmin.y, this.lmax.z + this.pos.z)
      this.onGround = queryVoxels(min,max).intersecting

      if (not this.onGround) :
        #calculate gravity
        if (this.gravity != 0) :
          this.vel[1] = this.vel[1] - this.gravity * dt # gravity/drag handle
          # gravity/drag handle
        this.onGround = false

      this.pos = this.pos + this.vel * dt + this.acceleration * dt
      this.angle = this.angle + this.angleVel * dt

      this.update(dt) # Updates the matrix






#########################
########ANIMATION########
#########################
var
  joints = this.data.joints
  num_joints = this.data.h.num_joints.int
  num_poses = this.data.h.num_poses.int
  num_verts = this.data.h.num_vertexes.int
  frames = this.data.frames
  blds = this.data.blendindexes
  ws = this.data.blendweights
  numTriangles = this.data.h.num_triangles.int
  numframes = this.data.h.num_frames.int

  curFrame = this.data.curframe mod numframes #Mod this in the real deal, for the sim we dont need to worry
  nextFrame = (curFrame + 1) mod numframes

  outframe = newSeq[Mat4](num_joints)
  outVerts = newSeq[float32](verticies.len)
  outNorms = newSeq[float32](normals.len)

for i in 0..(num_joints-1) :
  echo("here")
  let mat = frames[curFrame * num_joints + i] * (0.5) + frames[nextFrame * num_joints + i] * (0.5)

  if (joints[i].parent >= 0) :
    outframe[i] = outframe[joints[i].parent] * mat
  else :
    outframe[i] = mat
echo("cry")
for i in 0..(num_verts-1) :
  let
    srcpos = vec3(verticies[i*3],verticies[i*3+1],verticies[i*3+2])
    srcnorm = vec3(normals[i*3],normals[i*3+1],normals[i*3+2])
    srctan = quat(tangents[i*4],tangents[i*4+1],tangents[i*4+2],tangents[i*4+3])
  var
    dstpos = vec3()
    dstnorm = vec3()
    dsttan = vec3()
    dstbitan = vec3()
    index: array[0..3,uint8]
    weight: array[0..3,uint8]

  index = [blds[i*4+0],blds[i*4+1],blds[i*4+2],blds[i*4+3]]
  weight = [ws[i*4+0],ws[i*4+1],ws[i*4+2],ws[i*4+3]]

  var mat = outframe[index[0].int] * (weight[0].float/255.0)
  for j in 1..3 :
    if (weight[j].int > 0) :
      mat = mat + outframe[index[j].int] * (weight[j].float/255.0)
  #echo("weights", weight[0]," ", weight[1]," ", weight[2]," ",weight[3])

  dstpos = mat * srcpos
  var matnorm = mat4(mat.b.cross(mat.c), mat.c.cross(mat.a), mat.a.cross(mat.b))
  matnorm.m[15] = 1.0 #needs to preserve old data

  dstnorm = matnorm * srcnorm
  dsttan = matnorm * vec3(srctan[0],srctan[1],srctan[2])
  dstbitan = dstnorm.cross(dsttan) * srctan.w
  outVerts[i*3+0] = dstpos[0]
  outVerts[i*3+1] = dstpos[1]
  outVerts[i*3+2] = dstpos[2]

  outNorms[i*3+0] = dstnorm[0]
  outNorms[i*3+1] = dstnorm[1]
  outNorms[i*3+2] = dstnorm[2]

if (this.data.curframe > this.data.h.num_frames.int) :
  this.data.curframe = 0

#########################

glActiveTexture(GL_TEXTURE0)
glBindTexture(GL_TEXTURE_2D, 1)
glVertexPointer(3, cGL_FLOAT, 0, outVerts[0].addr)
let pos = glGetAttribLocation(1, "in_position").uint32
attrib(pos, 3'i32, cGL_FLOAT, outVerts[0].addr)
glNormalPointer(cGL_FLOAT, 0, outNorms[0].addr)
attrib(1, 3'i32, cGL_FLOAT, outNorms[0].addr)
glTexCoordPointer(2, cGL_FLOAT, 0, texCoords[0].addr)
attrib(2, 2'i32, cGL_FLOAT, texCoords[0].addr







proc drawww() =
  glUseProgram(1)
  var this: Entity
  var x = -3.0
  for i in low(entities)..high(entities) :
    x = x + 3.0
    this = entities[i]
    let
      center = this.obbc # ORIENTED BOUNDING BOXES ONLY HAVE 3 UNIQUE AXISES
      thisMin = this.lmin
      thisMax = this.lmax
      thisMatrix = this.matrix
    var
      aCorners: array[0..7, Vec3]
    #now we need to map each point onto each plane
    var aRot = identity()
    aRot = aRot.rotate(this.angle[2], vec3(0, 0, 1))
    aRot = aRot.rotate(this.angle[1], vec3(0, 1, 0))
    aRot = aRot.rotate(this.angle[0], vec3(1, 0, 0))

    #now we need to map each point onto each plane
    let
      av0 = vec3(thisMin.x, thisMin.y, thisMin.z)
      av1 = vec3(thisMin.x, thisMin.y, thisMax.z)
      av2 = vec3(thisMin.x, thisMax.y, thisMax.z)
      av3 = vec3(thisMin.x, thisMax.y, thisMin.z)
      av4 = vec3(thisMax.x, thisMax.y, thisMax.z)
      av5 = vec3(thisMax.x, thisMax.y, thisMin.z)
      av6 = vec3(thisMax.x, thisMin.y, thisMin.z)
      av7 = vec3(thisMax.x, thisMin.y, thisMax.z)


    aCorners[0] = aRot * av0
    aCorners[1] = aRot * av1
    aCorners[2] = aRot * av2
    aCorners[3] = aRot * av3
    aCorners[4] = aRot * av4
    aCorners[5] = aRot * av5
    aCorners[6] = aRot * av6
    aCorners[7] = aRot * av7

    let
      aX = abs(aRot.a) #a's local X axis
      aY = abs(aRot.b) #a's local Y Axis
      aZ = abs(aRot.c) #a's local Z Axis

    let indicies = [
      0,1,
      0,3,
      0,6,
      4,5,
      4,2,
      4,7,
      6,5,
      6,7,
      2,3,
      2,1,
      5,3,
      7,1
      ]

    glBegin(GL_LINES)

    let
      x = center + aX * 0.2
      y = center + aY * 0.2
      z = center + aZ * 0.2
    glVertex3f(center.x,center.y,center.z)
    glVertex3f(x.x,x.y,x.z)
    glVertex3f(center.x,center.y,center.z)
    glVertex3f(y.x,y.y,y.z)
    glVertex3f(center.x,center.y,center.z)
    glVertex3f(z.x,z.y,z.z)

    for i in 0..11 :
      glVertex3f(aCorners[indicies[i*2]][0],aCorners[indicies[i*2]][1],aCorners[indicies[i*2]][2])
      glVertex3f(aCorners[indicies[i*2+1]][0],aCorners[indicies[i*2+1]][1],aCorners[indicies[i*2+1]][2])
    glEnd()

#addDraw(drawww)


#We will be working in local space, and THIS will be at our origin
let
  thisMin = this.lmin + this.obbc
  thisMax = this.lmax + this.obbc
  thatMin = that.lmin + that.obbc
  thatMax = that.lmax + that.obbc

var
  aCorners: array[0..7, Vec3]
  bCorners: array[0..7, Vec3]
  aRot = this.rot
  bRot = that.rot

#now we need to map each point onto each plane
let
  av0 = vec3(thisMin.x, thisMin.y, thisMin.z)
  av1 = vec3(thisMin.x, thisMin.y, thisMax.z)
  av2 = vec3(thisMin.x, thisMax.y, thisMax.z)
  av3 = vec3(thisMin.x, thisMax.y, thisMin.z)
  av4 = vec3(thisMax.x, thisMax.y, thisMax.z)
  av5 = vec3(thisMax.x, thisMax.y, thisMin.z)
  av6 = vec3(thisMax.x, thisMin.y, thisMin.z)
  av7 = vec3(thisMax.x, thisMin.y, thisMax.z)

  bv0 = vec3(thatMin.x, thatMin.y, thatMin.z)
  bv1 = vec3(thatMin.x, thatMin.y, thatMax.z)
  bv2 = vec3(thatMin.x, thatMax.y, thatMax.z)
  bv3 = vec3(thatMin.x, thatMax.y, thatMin.z)
  bv4 = vec3(thatMax.x, thatMax.y, thatMax.z)
  bv5 = vec3(thatMax.x, thatMax.y, thatMin.z)
  bv6 = vec3(thatMax.x, thatMin.y, thatMin.z)
  bv7 = vec3(thatMax.x, thatMin.y, thatMax.z)

let aCorners = getBoxExtents(this)
aCorners[0] = aRot * (av0) + this.pos
aCorners[1] = aRot * (av1) + this.pos
aCorners[2] = aRot * (av2) + this.pos
aCorners[3] = aRot * (av3) + this.pos
aCorners[4] = aRot * (av4) + this.pos
aCorners[5] = aRot * (av5) + this.pos
aCorners[6] = aRot * (av6) + this.pos
aCorners[7] = aRot * (av7) + this.pos

bCorners[0] = bRot * (bv0) + that.pos
bCorners[1] = bRot * (bv1) + that.pos
bCorners[2] = bRot * (bv2) + that.pos
bCorners[3] = bRot * (bv3) + that.pos
bCorners[4] = bRot * (bv4) + that.pos
bCorners[5] = bRot * (bv5) + that.pos
bCorners[6] = bRot * (bv6) + that.pos
bCorners[7] = bRot * (bv7) + that.pos


trace.origin = trace.origin - that.pos
trace.offset = trace.offset - that.pos

trace.origin = that.rot * trace.origin
trace.offset = that.rot * trace.offset
trace.normal = normal(trace.origin - trace.offset)
var
  tmin = NegInf
  tmax = trace.dist
for i in 0..2 :
  var
    ood = 1.0 / trace.normal[i]
    t1 = ((that.lmin[i] + that.obbc[i]) - trace.origin[i]) * ood
    t2 = ((that.lmax[i] + that.obbc[i]) - trace.origin[i]) * ood

  if (t1 > t2) :
    t1 = ((that.lmax[i] + that.obbc[i]) - trace.origin[i]) * ood
    t2 = ((that.lmin[i] + that.obbc[i]) - trace.origin[i]) * ood

  if (t1 > tmin) :
    tmin = t1
  if (t2 > tmax) :
    tmax = t2

  if (tmin > tmax) :
    return c
echo("tmin : " ,tmin)
c.hitpos = that.rot.inverse() * (trace.origin + trace.normal * tmin) + that.pos
echo(c.hitpos)

proc addVectorToSeq(data: seq[float32], vector: Vec3): int =
  data.add(vector.x)
  data.add(vector.y)
  data.add(vector.z)
  return (data.len/3-1)

  var
    indicies, verticies, normals: seq[float32]
  let
    v1 = vec3(0,0,0)
    v2 = vec3(0,1,0)
    v3 = vec3(0,1,1)
    v4 = vec3(0,0,1)
    v5 = vec3(1,0,0)
    v6 = vec3(1,1,0)
    v7 = vec3(1,1,1)
    v8 = vec3(1,0,1)

    n1 = vec3(1,0,0)
    n2 = vec3(-1,0,0)
    n3 = vec3(0,1,0)
    n4 = vec3(0,-1,0)
    n5 = vec3(0,0,1)
    n6 = vec3(0,0,-1)

    i1 = addVectorToSeq(verticies, v1)
    i2 = addVectorToSeq(verticies, v2)
    i3 = addVectorToSeq(verticies, v3)
    i4 = addVectorToSeq(verticies, v4)
    i5 = addVectorToSeq(verticies, v5)
    i6 = addVectorToSeq(verticies, v6)
    i7 = addVectorToSeq(verticies, v7)
    i8 = addVectorToSeq(verticies, v8)

  #ADD THE FACES OF THE CUBE
  #+X FACE
  addVectorToSeq(verticies, v1)
  addVectorToSeq(verticies, v2)
  addVectorToSeq(verticies, v3)
  addVectorToSeq(verticies, v4)
  addVectorToSeq(verticies, v5)
  addVectorToSeq(verticies, v6)
  addVectorToSeq(verticies, v7)
  addVectorToSeq(verticies, v8)


  #+X FACE
  verticies.add(v1)
  indicies.add(indicies.len-1)
  verticies.add(v2)
  indicies.add(indicies.len-1)
  verticies.add(v3)
  indicies.add(indicies.len-1)
  normals.add(1.0)
  normals.add(0.0)
  normals.add(0.0)

  verticies.add(v1)
  indicies.add(indicies.len-1)
  verticies.add(v3)
  indicies.add(indicies.len-1)
  verticies.add(v4)
  indicies.add(indicies.len-1)
  normals.add(1.0)
  normals.add(0.0)
  normals.add(0.0)

  #-X FACE
  verticies.add(v5)
  indicies.add(indicies.len-1-1)
  verticies.add(v6)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  normals.add(-1.0)
  normals.add(0.0)
  normals.add(0.0)

  verticies.add(v5)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  verticies.add(v8)
  indicies.add(indicies.len-1-1)
  normals.add(-1.0)
  normals.add(0.0)
  normals.add(0.0)

  #-Z FACE
  verticies.add(v1)
  indicies.add(indicies.len-1-1)
  verticies.add(v2)
  indicies.add(indicies.len-1-1)
  verticies.add(v6)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(0.0)
  normals.add(-1.0)

  verticies.add(v1)
  indicies.add(indicies.len-1-1)
  verticies.add(v6)
  indicies.add(indicies.len-1-1)
  verticies.add(v5)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(0.0)
  normals.add(-1.0)

  #+Z FACE
  verticies.add(v4)
  indicies.add(indicies.len-1-1)
  verticies.add(v3)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(0.0)
  normals.add(1.0)

  verticies.add(v4)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  verticies.add(v8)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(0.0)
  normals.add(1.0)

  #+Y FACE
  verticies.add(v2)
  indicies.add(indicies.len-1-1)
  verticies.add(v3)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(1.0)
  normals.add(0.0)

  verticies.add(v2)
  indicies.add(indicies.len-1-1)
  verticies.add(v7)
  indicies.add(indicies.len-1-1)
  verticies.add(v6)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(1.0)
  normals.add(0.0)

  #-Y FACE
  verticies.add(v1)
  indicies.add(indicies.len-1-1)
  verticies.add(v4)
  indicies.add(indicies.len-1-1)
  verticies.add(v8)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(1.0)
  normals.add(0.0)

  verticies.add(v1)
  indicies.add(indicies.len-1-1)
  verticies.add(v8)
  indicies.add(indicies.len-1-1)
  verticies.add(v5)
  indicies.add(indicies.len-1-1)
  normals.add(0.0)
  normals.add(1.0)
  normals.add(0.0)




  for m in 0..2 :
    var j = 1 #make y axis our priority
    echo(maxv)
    if (true):#result.hitNormal[j]) :
      let
        val = result.hitNormal[j]
        voxMin = result.hitPos[j] - 0.5
        voxMax = result.hitPos[j] + 0.5

      #echo(voxMin, ",", voxMax, " | ", lmin[j], ",", lmax[j])
      result.hitNormal = vec3(0)
      if (val < 0) :
        let pen = voxMin - lmax[j]
        result.hitNormal[j] = -1
        if (this.acceleration.normal()[j] > 0) :
          this.acceleration[j] = min(0, this.acceleration[j])
        if (this.vel.normal()[j] > 0) :
          this.vel[j] = min(0, this.vel[j])
        #unstick
        #this.pos[j] = origin[j] + obbc[j] + pen + 0.05 # voxel size is 1.0 result.hitPos[j] - 1
        echo(pen)
        echo(j)
      else :
        let pen = voxMax - lmin[j]
        result.hitNormal[j] = 1
        if (this.acceleration.normal()[j] < 0) :
          this.acceleration[j] = max(0, this.acceleration[j])
        if (this.vel.normal()[j] < 0) :
          this.vel[j] = max(0, this.vel[j])
        #this.pos[j] = origin[j] + obbc[j] + pen + 0.05 # voxel size is 1.0
      break
